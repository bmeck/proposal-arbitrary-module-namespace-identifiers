<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="./spec.js"></script>
<pre class="metadata">
title: Arbitrary Module Namespace Identifiers
stage: 0
contributors: Bradley Farias
location: https://github.com/bmeck/proposal-arbitrary-module-namespace-identifiers
</pre>
<emu-clause id="sec-scope">
  <h1>Scope</h1>
  <p>
    This is the spec text of the <a href="https://github.com/bmeck/proposal-arbitrary-module-namespace-identifiers/">Arbitrary Module Namespace Identifiers</a> in ECMAScript.
  </p>
  <p>
    This proposal allows for any valid UTF8 string to be imported or exported from a Module.
  </p>
</emu-clause>

<emu-clause id="sec-modules">
  <h1>Modules (<a href="https://tc39.github.io/ecma262/#sec-modules">15.1</a>)</h1>
  <h2>Syntax</h2>
  <emu-grammar type="definition">
    <ins class="block">
    ModuleExportName:
      StringLiteral
    </ins>
  </emu-grammar>
</emu-clause>
<emu-clause id="sec-imports">
  <h1>Imports (<a href="https://tc39.github.io/ecma262/#sec-imports">15.2.2</a>)</h1>
  <h2>Syntax</h2>
  <emu-grammar type="definition">
    ImportSpecifier:
      ImportedBinding
      IdentifierName as ImportedBinding
      <ins>ModuleExportName as ImportedBinding</ins>
  </emu-grammar>
</emu-clause>
<emu-clause id="sec-exports">
  <h1>Exports (<a href="https://tc39.github.io/ecma262/#sec-exports">15.2.3</a>)</h1>
  <h2>Syntax</h2>
  <emu-grammar type="definition">
    ExportSpecifier:
      IdentifierName
      IdentifierName as IdentifierName
      <ins>IdentifierName as ModuleExportName</ins>
  </emu-grammar>
</emu-clause>

<emu-clause id="sec-module-semantics">
  <h1>Static Semantics: Early Errors</h1>
  <emu-grammar>
    ModuleExportName: StringLiteral
  </emu-grammar>
  <emu-alg>
    1. Let _string_ be the result of evaluating |StringLiteral|.
    2. Let _strLen_ be the number of code units in string.
    3. Let _k_ be 0.
    4. Repeat,
      1. If _k_ equals _strLen_, return.
      2. Let _cp_ be ! CodePointAt(_string_, _k_).
      3. If _cp_.[[IsUnpairedSurrogate]] is *true*, throw a *SyntaxError* exception.
      4. Set _k_ to _k_ + _cp_.[[CodeUnitCount]].
  </emu-alg>
</emu-clause>
